services:
  # ðŸ§  Postgres + pgvector
  pgvector:
    image: agnohq/pgvector:16
    container_name: pgvector
    restart: unless-stopped
    environment:
      POSTGRES_USER: ai
      POSTGRES_PASSWORD: ai
      POSTGRES_DB: ai
    ports:
      - '5432:5432'
    volumes:
      - pgvolume:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ai']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # ðŸ¤– Ollama (GPU accelerated)
  ollama:
    image: ollama/ollama:latest
    container_name: vboarder_ollama
    restart: unless-stopped
    ports:
      - '11434:11434'
    environment:
      OLLAMA_HOST: '0.0.0.0'
      OLLAMA_KEEP_ALIVE: '4h'
      OLLAMA_NUM_PARALLEL: '1'
      OLLAMA_NUM_CTX: '4096'
    volumes:
      - /mnt/d/ai/models/ollama:/root/.ollama
    healthcheck:
      test: ['CMD', 'ollama', 'list']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: ['gpu']

  # ðŸš€ vBoarder-Agno API
  vboarder-agno-api:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: vboarder-agno-api
    restart: unless-stopped
    depends_on:
      pgvector:
        condition: service_healthy
      ollama:
        condition: service_healthy
    environment:
      DB_CONNECTION_URL: postgresql://ai:ai@pgvector:5432/ai
      OLLAMA_HOST: http://ollama:11434
    ports:
      - '8000:8000'
    command: >
      uvicorn main:app
      --host 0.0.0.0
      --port 8000
      --reload
    healthcheck:
      test: ['CMD-SHELL', 'curl -fsS http://localhost:8000/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

volumes:
  pgvolume:
